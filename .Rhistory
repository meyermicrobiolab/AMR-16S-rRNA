p2<-ggplot(inact_meta, aes(fill=AMR.Gene.Family, x=sample, y=proportion))+
geom_bar(position="fill",stat="identity")+
facet_grid(. ~ type, scales="free", space="free")+
theme_bw()+
theme(axis.text.x=element_text(angle=90))+
theme(strip.text.x=element_text(face="bold"))+
scale_fill_manual(values = mycolors2)
p2
inact_meta$AMR.Gene.Family <-factor(inact_meta$AMR.Gene.Family, levels = c("OXA beta-lactamase","nitroimidazole reductase","tetracycline inactivation enzyme","chloramphenicol acetyltransferase (CAT)","streptogramin vgb lyase",'
ANT(3")',"macrolide phosphotransferase (MPH)","ADC beta-lactamases pending classification for carbapenemase activity","CfiA beta-lactamase","MOX beta-lactamase"))
#colorblind friendly palette from ggpubfigs: https://github.com/JLSteenwyk/ggpubfigs/blob/master/R/colors.R
#muted_nine = c("#332288", "#117733", "#CC6677", "#88CCEE", "#999933", "#882255", "#44AA99", "#DDCC77", "#AA4499")
mycolors2 <-c("OXA beta-lactamase"="#332288","nitroimidazole reductase"="#117733","tetracycline inactivation enzyme"="#CC6677","chloramphenicol acetyltransferase (CAT)"="#88CCEE","streptogramin vgb lyase"="#999933",'ANT(3")'="#882255","macrolide phosphotransferase (MPH)"="#44AA99","ADC beta-lactamases pending classification for carbapenemase activity"="#DDCC77","CfiA beta-lactamase"="#AA4499","MOX beta-lactamase"="#999999")
p2<-ggplot(inact_meta, aes(fill=AMR.Gene.Family, x=sample, y=proportion))+
geom_bar(position="fill",stat="identity")+
facet_grid(. ~ type, scales="free", space="free")+
theme_bw()+
theme(axis.text.x=element_text(angle=90))+
theme(strip.text.x=element_text(face="bold"))+
scale_fill_manual(values = mycolors2)
p2
library(dplyr)
library(reshape2)
library(ggplot2)
rgi_counts <- read.table("Untreated-vs-antibiotic_RGI-counts.txt",sep="\t",header=TRUE)
rgi_counts[1] <- NULL
#subset = just "antibiotic inactivation" which includes beta-lactamases
inact <- rgi_counts[which(rgi_counts$Resistance.Mechanism=='antibiotic inactivation'),]
inact2 <- inact %>% group_by(AMR.Gene.Family) %>% summarize_at(vars(AMR1A:AMR10A), sum)
write.table(inact2,"Untreated-vs-antibiotic_AntibioticInactivation-counts.txt",sep="\t",col.names=NA)
#calculate relative abundance from counts
inact2_RA <- inact2[,-1]/colSums(inact2[,-1]) * 100
inact2_RA$AMR.Gene.Family <- inact2$AMR.Gene.Family
inact3 = inact2_RA[, c("AMR.Gene.Family", names(inact2_RA)[names(inact2_RA) != "AMR.Gene.Family"])]
write.table(inact3,"Untreated-vs-antibiotic_AntibioticInactivation-RA.txt",sep="\t",col.names=NA)
#find the top10 antibiotic inactivation gene families
inact3$total <- rowSums(inact3[,2:14])
inact3 <- inact3[order(inact3$total, decreasing = TRUE),]
top10 <-head(inact3, 10)
write.table(top10,"Untreated-vs-antibiotic_AntibioticInactivation-RA_top10_inactivation.txt",sep="\t",col.names=NA)
#merge metadata and count dataframes - start by converting mech from wide to long format
top10_long <- melt(top10, id.vars=c("AMR.Gene.Family"))
colnames(top10_long)[colnames(top10_long) == "variable"] <- "sample"
colnames(top10_long)[colnames(top10_long) == "value"] <- "proportion"
meta <-read.table("metadata_13.txt",sep="\t",header=TRUE)
meta$X <- NULL
inact_meta <-merge(meta, top10_long, "sample")
#plot as stacked bars
inact_meta$type <-factor(inact_meta$type, levels=c("before","after"))
inact_meta$AMR.Gene.Family <-factor(inact_meta$AMR.Gene.Family, levels = c("OXA beta-lactamase","nitroimidazole reductase","tetracycline inactivation enzyme","chloramphenicol acetyltransferase (CAT)","streptogramin vgb lyase",'
ANT(3")',"macrolide phosphotransferase (MPH)","ADC beta-lactamases pending classification for carbapenemase activity","CfiA beta-lactamase","MOX beta-lactamase"))
#colorblind friendly palette from ggpubfigs: https://github.com/JLSteenwyk/ggpubfigs/blob/master/R/colors.R
#muted_nine = c("#332288", "#117733", "#CC6677", "#88CCEE", "#999933", "#882255", "#44AA99", "#DDCC77", "#AA4499")
mycolors2 <-c("OXA beta-lactamase"="#332288","nitroimidazole reductase"="#117733","tetracycline inactivation enzyme"="#CC6677","chloramphenicol acetyltransferase (CAT)"="#88CCEE","streptogramin vgb lyase"="#999933",'ANT(3")'="#882255","macrolide phosphotransferase (MPH)"="#44AA99","ADC beta-lactamases pending classification for carbapenemase activity"="#DDCC77","CfiA beta-lactamase"="#AA4499","MOX beta-lactamase"="#999999")
#pdf("inactivation_top10.pdf", height=4)
p2<-ggplot(inact_meta, aes(fill=AMR.Gene.Family, x=sample, y=proportion))+
geom_bar(position="fill",stat="identity")+
facet_grid(. ~ type, scales="free", space="free")+
theme_bw()+
theme(axis.text.x=element_text(angle=90))+
theme(strip.text.x=element_text(face="bold"))+
scale_fill_manual(values = mycolors2)
p2
#dev.off()
inact_meta$type <-factor(inact_meta$type, levels=c("before","after"))
inact_meta$AMR.Gene.Family <-factor(inact_meta$AMR.Gene.Family, levels = c("OXA beta-lactamase","nitroimidazole reductase","tetracycline inactivation enzyme","chloramphenicol acetyltransferase (CAT)","streptogramin vgb lyase",'ANT(3")',"macrolide phosphotransferase (MPH)","ADC beta-lactamases pending classification for carbapenemase activity","CfiA beta-lactamase","MOX beta-lactamase"))
#colorblind friendly palette from ggpubfigs: https://github.com/JLSteenwyk/ggpubfigs/blob/master/R/colors.R
#muted_nine = c("#332288", "#117733", "#CC6677", "#88CCEE", "#999933", "#882255", "#44AA99", "#DDCC77", "#AA4499")
mycolors2 <-c("OXA beta-lactamase"="#332288","nitroimidazole reductase"="#117733","tetracycline inactivation enzyme"="#CC6677","chloramphenicol acetyltransferase (CAT)"="#88CCEE","streptogramin vgb lyase"="#999933",'ANT(3")'="#882255","macrolide phosphotransferase (MPH)"="#44AA99","ADC beta-lactamases pending classification for carbapenemase activity"="#DDCC77","CfiA beta-lactamase"="#AA4499","MOX beta-lactamase"="#999999")
#pdf("inactivation_top10.pdf", height=4)
p2<-ggplot(inact_meta, aes(fill=AMR.Gene.Family, x=sample, y=proportion))+
geom_bar(position="fill",stat="identity")+
facet_grid(. ~ type, scales="free", space="free")+
theme_bw()+
theme(axis.text.x=element_text(angle=90))+
theme(strip.text.x=element_text(face="bold"))+
scale_fill_manual(values = mycolors2)
p2
#dev.off()
`
View(top10)
View(top10)
View(top10)
View(top10)
knitr::opts_chunk$set(echo = TRUE)
library(dada2)
library(ggplot2)
library(phyloseq)
library(vegan)
library(knitr)
library(ALDEx2)
library(CoDaSeq)
library(ANCOMBC)
library(dada2)
library(ggplot2)
library(phyloseq)
library(vegan)
library(knitr)
library(ALDEx2)
library(CoDaSeq)
#library(ANCOMBC)
library(dplyr)
library(nloptr)
library(tibble)
library(randomcoloR)
#writeLines(capture.output(sessionInfo()), "sessionInfo.txt")
sessionInfo()
install.packages(c("bslib", "callr", "codetools", "data.table", "digest", "gh", "htmltools", "httpuv", "httr2", "igraph", "knitr", "lattice", "lme4", "munsell", "pkgbuild", "processx", "promises", "ragg", "RcppArmadillo", "remotes", "rstudioapi", "sass", "shiny", "tidyselect", "tinytex", "xfun", "zCompositions"))
install.packages(c("bslib", "callr", "codetools", "data.table", "digest", "gh", "htmltools", "httpuv", "httr2", "igraph", "knitr", "lattice", "lme4", "munsell", "pkgbuild", "processx", "promises", "ragg", "RcppArmadillo", "remotes", "rstudioapi", "sass", "shiny", "tidyselect", "tinytex", "xfun", "zCompositions"))
install.packages(c("bslib", "callr", "codetools", "data.table", "digest", "gh", "htmltools", "httpuv", "httr2", "igraph", "knitr", "lattice", "lme4", "munsell", "pkgbuild", "processx", "promises", "ragg", "RcppArmadillo", "remotes", "rstudioapi", "sass", "shiny", "tidyselect", "tinytex", "xfun", "zCompositions"))
install.packages(c("bslib", "callr", "codetools", "data.table", "digest", "gh", "htmltools", "httpuv", "httr2", "igraph", "knitr", "lattice", "lme4", "munsell", "pkgbuild", "processx", "promises", "ragg", "RcppArmadillo", "remotes", "rstudioapi", "sass", "shiny", "tidyselect", "tinytex", "xfun", "zCompositions"))
install.packages(c("bslib", "callr", "codetools", "data.table", "digest", "gh", "htmltools", "httpuv", "httr2", "igraph", "knitr", "lattice", "lme4", "munsell", "pkgbuild", "processx", "promises", "ragg", "RcppArmadillo", "remotes", "rstudioapi", "sass", "shiny", "tidyselect", "tinytex", "xfun", "zCompositions"))
library(dada2)
library(ggplot2)
library(phyloseq)
library(vegan)
library(CoDaSeq)
library(dplyr)
library(nloptr)
library(tibble)
library(randomcoloR)
writeLines(capture.output(sessionInfo()), "sessionInfo.txt")
knitr::opts_chunk$set(echo = TRUE)
library(dada2)
library(ggplot2)
library(phyloseq)
library(vegan)
library(knitr)
library(ALDEx2)
library(CoDaSeq)
library(ANCOMBC)
library(dada2)
library(ggplot2)
library(phyloseq)
library(vegan)
library(knitr)
library(ALDEx2)
library(CoDaSeq)
library(dplyr)
library(nloptr)
library(tibble)
library(randomcoloR)
writeLines(capture.output(sessionInfo()), "sessionInfo.txt")
setwd("/Users/juliemeyer/Documents/GitHub/AMR-16S-rRNA")
otu <- read.table("silva_nochloronomito_otu_table_ps1.txt",sep="\t",header=TRUE, row.names=1)
taxon <- read.table("silva_nochloronomito_taxa_table_ps1.txt",sep="\t",header=TRUE,row.names=1)
samples<-read.table("metadata_ps1.txt",sep="\t",header=T,row.names=1)
OTU = otu_table(otu, taxa_are_rows=FALSE)
taxon<-as.matrix(taxon)
TAX = tax_table(taxon)
sampledata = sample_data(samples)
ps1 <- phyloseq(otu_table(otu, taxa_are_rows=FALSE),
sample_data(samples),
tax_table(taxon))
ps1
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install("ANCOMBC")
library(ANCOMBC)
# You can verify the change by checking:
levels(sample_data(ps1)$type)
View(sampledata)
#Note that by default, levels of a categorical variable in R are sorted
# alphabetically. In this case, the reference level for `type` will be
# `after`. To manually change the reference level, for instance, setting `before`
# as the reference level, use:
ps1$type = factor(ps1$type, levels = c("before", "after"))
sample_data(ps1)$type<-factor(sample_data(ps1)$type,levels=c("before","after"))
levels(sample_data(ps1)$type)
set.seed(123)
output = ancombc2(data = ps1, assay_name = "counts", tax_level = "Genus",
fix_formula = "type", rand_formula = NULL,
p_adj_method = "holm", pseudo = 0, pseudo_sens = TRUE,
prv_cut = 0.10, lib_cut = 1000, s0_perc = 0.05,
group = "type", struc_zero = FALSE, neg_lb = FALSE,
alpha = 0.05, n_cl = 2, verbose = TRUE,
global = FALSE, pairwise = FALSE,
dunnet = FALSE, trend = FALSE,
iter_control = list(tol = 1e-5, max_iter = 20,
verbose = FALSE),
em_control = list(tol = 1e-5, max_iter = 100),
lme_control = NULL, mdfdr_control = NULL,
trend_control = NULL)
res_prim = output$res
output$res
write.table(res_prim,file="ancomBC-results-BH-genus-by-type.txt")
tab_sens = output$pseudo_sens_tab
View(res_prim)
View(samples)
View(samples)
set.seed(123)
output = ancombc2(data = ps1, assay_name = "counts", tax_level = "Genus",
fix_formula = "fraction + type", rand_formula = NULL,
p_adj_method = "holm", pseudo = 0, pseudo_sens = TRUE,
prv_cut = 0.10, lib_cut = 1000, s0_perc = 0.05,
group = "type", struc_zero = FALSE, neg_lb = FALSE,
alpha = 0.05, n_cl = 2, verbose = TRUE,
global = FALSE, pairwise = FALSE,
dunnet = FALSE, trend = FALSE,
iter_control = list(tol = 1e-5, max_iter = 20,
verbose = FALSE),
em_control = list(tol = 1e-5, max_iter = 100),
lme_control = NULL, mdfdr_control = NULL,
trend_control = NULL)
res_prim = output$res
output$res
View(res_prim)
write.table(res_prim,file="ancomBC-results-BH-genus-by-type.txt")
write.table(res_prim,file="ancomBC-results-BH-genus-by-type.txt",sep="\t")
knitr::opts_chunk$set(echo = TRUE)
library(dada2)
library(CoDaSeq)
library(ggplot2)
library(phyloseq)
library(vegan)
library(ANCOMBC)
library(corncob)
library(knitr)
library(dplyr)
library(nloptr)
library(tibble)
library(randomcoloR)
writeLines(capture.output(sessionInfo()), "sessionInfo.txt")
otu <- read.table("silva_nochloronomito_otu_table_ps5.txt",sep="\t",header=TRUE, row.names=1)
taxon <- read.table("silva_nochloronomito_taxa_table_ps5.txt",sep="\t",header=TRUE,row.names=1)
samples<-read.table("metadata_ps5.txt",sep="\t",header=T,row.names=1)
OTU = otu_table(otu, taxa_are_rows=FALSE)
taxon<-as.matrix(taxon)
TAX = tax_table(taxon)
sampledata = sample_data(samples)
ps <- phyloseq(otu_table(otu, taxa_are_rows=FALSE),
sample_data(samples),
tax_table(taxon))
ps
# DA determined relative to first reference level. The default in R is alphabetical order, but I want to compare taxa "after" relative to "before", so I need to manually state the order of input.
sample_data(ps)$type<-factor(sample_data(ps)$type,levels=c("before","after"))
# You can verify the change by checking:
levels(sample_data(ps)$type)
View(samples)
set.seed(1)
treatment.da <- differentialTest(formula = ~ type + fraction,
phi.formula = ~ type,
formula_null = ~ fraction,
phi.formula_null = ~ 1,
test = "Wald", boot = FALSE,
data = ps,
fdr_cutoff = 0.05)
summary(treatment.da)
treatment.da
treatment.da$significant_taxa
plot(treatment.da, c("Family", "Genus"))
ps1_dna = subset_samples(ps1, fraction == "DNA")
otu <- read.table("silva_nochloronomito_otu_table_ps1.txt",sep="\t",header=TRUE, row.names=1)
taxon <- read.table("silva_nochloronomito_taxa_table_ps1.txt",sep="\t",header=TRUE,row.names=1)
samples<-read.table("metadata_ps1.txt",sep="\t",header=T,row.names=1)
OTU = otu_table(otu, taxa_are_rows=FALSE)
taxon<-as.matrix(taxon)
TAX = tax_table(taxon)
sampledata = sample_data(samples)
ps1 <- phyloseq(otu_table(otu, taxa_are_rows=FALSE),
sample_data(samples),
tax_table(taxon))
ps1
ps1_dna = subset_samples(ps1, fraction == "DNA")
ps1_rna = subset_samples(ps1, fraction == "RNA")
ps1_rna = subset_samples(ps1, fraction == "RNA")
ps1_dna
ps1 #6138 taxa and 35 samples
ps1_rna <- subset_samples(ps1, fraction == "RNA")
otu <- read.table("silva_nochloronomito_otu_table_ps1.txt",sep="\t",header=TRUE, row.names=1)
taxon <- read.table("silva_nochloronomito_taxa_table_ps1.txt",sep="\t",header=TRUE,row.names=1)
samples<-read.table("metadata_ps1.txt",sep="\t",header=T,row.names=1)
OTU = otu_table(otu, taxa_are_rows=FALSE)
taxon<-as.matrix(taxon)
TAX = tax_table(taxon)
sampledata = sample_data(samples)
ps1 <- phyloseq(otu_table(otu, taxa_are_rows=FALSE),
sample_data(samples),
tax_table(taxon))
ps1
ps1_rna <- subset_samples(ps1, fraction == "RNA")
View(samples)
View(sampledata)
ps1_rna <- subset_samples(ps1, fraction == "RNA")
ps1_dna <- subset_samples(ps1, fraction == "DNA")
ps1_dna
sample_data(ps1_dna)$type<-factor(sample_data(ps1_dna)$type,levels=c("before","after"))
# You can verify the change by checking:
levels(sample_data(ps1_dna)$type)
set.seed(123)
output = ancombc2(data = ps1_dna, assay_name = "counts", tax_level = "Genus",
fix_formula = "fraction + type", rand_formula = NULL,
p_adj_method = "holm", pseudo = 0, pseudo_sens = TRUE,
prv_cut = 0.10, lib_cut = 1000, s0_perc = 0.05,
group = "type", struc_zero = FALSE, neg_lb = FALSE,
alpha = 0.05, n_cl = 2, verbose = TRUE,
global = FALSE, pairwise = FALSE,
dunnet = FALSE, trend = FALSE,
iter_control = list(tol = 1e-5, max_iter = 20,
verbose = FALSE),
em_control = list(tol = 1e-5, max_iter = 100),
lme_control = NULL, mdfdr_control = NULL,
trend_control = NULL)
BiocManager::install("ANCOMBC")
library(ANCOMBC)
writeLines(capture.output(sessionInfo()), "sessionInfo.txt")
set.seed(123)
output = ancombc2(data = ps1_dna, assay_name = "counts", tax_level = "Genus",
fix_formula = "fraction + type", rand_formula = NULL,
p_adj_method = "holm", pseudo = 0, pseudo_sens = TRUE,
prv_cut = 0.10, lib_cut = 1000, s0_perc = 0.05,
group = "type", struc_zero = FALSE, neg_lb = FALSE,
alpha = 0.05, n_cl = 2, verbose = TRUE,
global = FALSE, pairwise = FALSE,
dunnet = FALSE, trend = FALSE,
iter_control = list(tol = 1e-5, max_iter = 20,
verbose = FALSE),
em_control = list(tol = 1e-5, max_iter = 100),
lme_control = NULL, mdfdr_control = NULL,
trend_control = NULL)
set.seed(123)
output = ancombc2(data = ps1_dna, assay_name = "counts", tax_level = "Genus",
fix_formula = "type", rand_formula = NULL,
p_adj_method = "holm", pseudo = 0, pseudo_sens = TRUE,
prv_cut = 0.10, lib_cut = 1000, s0_perc = 0.05,
group = "type", struc_zero = FALSE, neg_lb = FALSE,
alpha = 0.05, n_cl = 2, verbose = TRUE,
global = FALSE, pairwise = FALSE,
dunnet = FALSE, trend = FALSE,
iter_control = list(tol = 1e-5, max_iter = 20,
verbose = FALSE),
em_control = list(tol = 1e-5, max_iter = 100),
lme_control = NULL, mdfdr_control = NULL,
trend_control = NULL)
res_prim = output$res
otu <- read.table("silva_nochloronomito_otu_table_ps1.txt",sep="\t",header=TRUE, row.names=1)
taxon <- read.table("silva_nochloronomito_taxa_table_ps1.txt",sep="\t",header=TRUE,row.names=1)
samples<-read.table("metadata_ps1.txt",sep="\t",header=T,row.names=1)
OTU = otu_table(otu, taxa_are_rows=FALSE)
taxon<-as.matrix(taxon)
TAX = tax_table(taxon)
sampledata = sample_data(samples)
ps1 <- phyloseq(otu_table(otu, taxa_are_rows=FALSE),
sample_data(samples),
tax_table(taxon))
ps1
sample_data(ps1)$type<-factor(sample_data(ps1)$type,levels=c("before","after"))
# You can verify the change by checking:
levels(sample_data(ps1)$type)
# prune empty rows
ps_qf <- prune_taxa(taxa_sums(ps1) > 1, ps1)
# ANCOM-BC2 results will be expressed as a relative relationship - it will test variables in the order that they are input. The default in R is alphabetical order, but I want to compare taxa "after" relative to "before", so I need to manually state the order of input.
sample_data(ps1)$type<-factor(sample_data(ps1)$type,levels=c("before","after"))
ps_qf
sample_data(ps_qf)$type<-factor(sample_data(ps_qf)$type,levels=c("before","after"))
# You can verify the change by checking:
levels(sample_data(ps_qf)$type)
set.seed(123)
output = ancombc2(data = ps_qf, assay_name = "counts", tax_level = "Genus",
fix_formula = "fraction + type", rand_formula = NULL,
p_adj_method = "holm", pseudo = 0, pseudo_sens = TRUE,
prv_cut = 0.10, lib_cut = 1000, s0_perc = 0.05,
group = "type", struc_zero = FALSE, neg_lb = FALSE,
alpha = 0.05, n_cl = 2, verbose = TRUE,
global = FALSE, pairwise = FALSE,
dunnet = FALSE, trend = FALSE,
iter_control = list(tol = 1e-5, max_iter = 20,
verbose = FALSE),
em_control = list(tol = 1e-5, max_iter = 100),
lme_control = NULL, mdfdr_control = NULL,
trend_control = NULL)
res_prim = output$res
output$res
write.table(res_prim,file="ancomBC-results-BH-genus-by-type.txt",sep="\t")
ps_dna <- subset_samples(ps_qf, fraction == "DNA")
ps_dna # 6138 taxa and 18 samples
# prune empty rows
ps_dna_qf <- prune_taxa(taxa_sums(ps_dna) > 1, ps1)
# prune empty rows
ps_dna_qf <- prune_taxa(taxa_sums(ps_dna) > 1, ps_dna)
ps_dna_qf # 1853 taxa and 35 samples
sample_data(ps_dna_qf)$type<-factor(sample_data(ps_dna_qf)$type,levels=c("before","after"))
# You can verify the change by checking:
levels(sample_data(ps_dna_qf)$type)
set.seed(123)
output = ancombc2(data = ps_dna_qf, assay_name = "counts", tax_level = "Genus",
fix_formula = "type", rand_formula = NULL,
p_adj_method = "holm", pseudo = 0, pseudo_sens = TRUE,
prv_cut = 0.10, lib_cut = 1000, s0_perc = 0.05,
group = "type", struc_zero = FALSE, neg_lb = FALSE,
alpha = 0.05, n_cl = 2, verbose = TRUE,
global = FALSE, pairwise = FALSE,
dunnet = FALSE, trend = FALSE,
iter_control = list(tol = 1e-5, max_iter = 20,
verbose = FALSE),
em_control = list(tol = 1e-5, max_iter = 100),
lme_control = NULL, mdfdr_control = NULL,
trend_control = NULL)
res_prim = output$res
output$res
write.table(res_prim,file="ancomBC-results-BH-genus-by-type_DNA.txt",sep="\t") # getting "NA" for some taxa - need to find out why it is doing this
ps_rna <- subset_samples(ps_qf, fraction == "RNA")
View(samples)
otu <- read.table("silva_nochloronomito_otu_table_ps1.txt",sep="\t",header=TRUE, row.names=1)
taxon <- read.table("silva_nochloronomito_taxa_table_ps1.txt",sep="\t",header=TRUE,row.names=1)
samples<-read.table("metadata_ps1.txt",sep="\t",header=T,row.names=1)
OTU = otu_table(otu, taxa_are_rows=FALSE)
taxon<-as.matrix(taxon)
TAX = tax_table(taxon)
sampledata = sample_data(samples)
ps1 <- phyloseq(otu_table(otu, taxa_are_rows=FALSE),
sample_data(samples),
tax_table(taxon))
ps1
ps_qf <- prune_taxa(taxa_sums(ps1) > 1, ps1)
ps_qf # 1853 taxa and 35 samples
ps_rna <- subset_samples(ps_qf, fraction == "RNA")
ps_rna # 1853 taxa and 18 samples
# prune empty rows
ps_rna_qf <- prune_taxa(taxa_sums(ps_rna) > 1, ps_rna)
ps_rna_qf
sample_data(ps_rna_qf)$type<-factor(sample_data(ps_rna_qf)$type,levels=c("before","after"))
# You can verify the change by checking:
levels(sample_data(ps_rna_qf)$type)
set.seed(123)
output = ancombc2(data = ps_rna_qf, assay_name = "counts", tax_level = "Genus",
fix_formula = "type", rand_formula = NULL,
p_adj_method = "holm", pseudo = 0, pseudo_sens = TRUE,
prv_cut = 0.10, lib_cut = 1000, s0_perc = 0.05,
group = "type", struc_zero = FALSE, neg_lb = FALSE,
alpha = 0.05, n_cl = 2, verbose = TRUE,
global = FALSE, pairwise = FALSE,
dunnet = FALSE, trend = FALSE,
iter_control = list(tol = 1e-5, max_iter = 20,
verbose = FALSE),
em_control = list(tol = 1e-5, max_iter = 100),
lme_control = NULL, mdfdr_control = NULL,
trend_control = NULL)
res_prim = output$res
View(res_prim)
set.seed(123)
output = ancombc2(data = ps_qf, assay_name = "counts", tax_level = "Genus",
fix_formula = "fraction + type", rand_formula = NULL,
p_adj_method = "holm", pseudo = 0, pseudo_sens = TRUE,
prv_cut = 0.10, lib_cut = 1000, s0_perc = 0.05,
group = "type", struc_zero = FALSE, neg_lb = FALSE,
alpha = 0.05, n_cl = 2, verbose = TRUE,
global = FALSE, pairwise = FALSE,
dunnet = FALSE, trend = FALSE,
iter_control = list(tol = 1e-5, max_iter = 20,
verbose = FALSE),
em_control = list(tol = 1e-5, max_iter = 100),
lme_control = NULL, mdfdr_control = NULL,
trend_control = NULL)
res_prim = output$res
View(res_prim)
set.seed(123)
output = ancombc2(data = ps_dna_qf, assay_name = "counts", tax_level = "Genus",
fix_formula = "type", rand_formula = NULL,
p_adj_method = "holm", pseudo = 0, pseudo_sens = TRUE,
prv_cut = 0.10, lib_cut = 1000, s0_perc = 0.05,
group = "type", struc_zero = FALSE, neg_lb = FALSE,
alpha = 0.05, n_cl = 2, verbose = TRUE,
global = FALSE, pairwise = FALSE,
dunnet = FALSE, trend = FALSE,
iter_control = list(tol = 1e-5, max_iter = 20,
verbose = FALSE),
em_control = list(tol = 1e-5, max_iter = 100),
lme_control = NULL, mdfdr_control = NULL,
trend_control = NULL)
ps_dna <- subset_samples(ps_qf, fraction == "DNA")
ps_dna
ps_dna_qf <- prune_taxa(taxa_sums(ps_dna) > 1, ps_dna)
ps_dna_qf
sample_data(ps_dna_qf)$type<-factor(sample_data(ps_dna_qf)$type,levels=c("before","after"))
# You can verify the change by checking:
levels(sample_data(ps_dna_qf)$type)
set.seed(123)
output = ancombc2(data = ps_dna_qf, assay_name = "counts", tax_level = "Genus",
fix_formula = "type", rand_formula = NULL,
p_adj_method = "holm", pseudo = 0, pseudo_sens = TRUE,
prv_cut = 0.10, lib_cut = 1000, s0_perc = 0.05,
group = "type", struc_zero = FALSE, neg_lb = FALSE,
alpha = 0.05, n_cl = 2, verbose = TRUE,
global = FALSE, pairwise = FALSE,
dunnet = FALSE, trend = FALSE,
iter_control = list(tol = 1e-5, max_iter = 20,
verbose = FALSE),
em_control = list(tol = 1e-5, max_iter = 100),
lme_control = NULL, mdfdr_control = NULL,
trend_control = NULL)
res_prim_dna = output$res
View(res_prim_dna)
ps_rna_qf # 888 taxa and 17 samples
# You can verify the change by checking:
levels(sample_data(ps_rna_qf)$type)
set.seed(123)
output = ancombc2(data = ps_rna_qf, assay_name = "counts", tax_level = "Genus",
fix_formula = "type", rand_formula = NULL,
p_adj_method = "holm", pseudo = 0, pseudo_sens = TRUE,
prv_cut = 0.10, lib_cut = 1000, s0_perc = 0.05,
group = "type", struc_zero = FALSE, neg_lb = FALSE,
alpha = 0.05, n_cl = 2, verbose = TRUE,
global = FALSE, pairwise = FALSE,
dunnet = FALSE, trend = FALSE,
iter_control = list(tol = 1e-5, max_iter = 20,
verbose = FALSE),
em_control = list(tol = 1e-5, max_iter = 100),
lme_control = NULL, mdfdr_control = NULL,
trend_control = NULL)
res_prim_rna = output$res
View(res_prim_rna)

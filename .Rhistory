library(DESeq2)
meta <-read.table("metadata_13.txt",sep="\t",header=TRUE)
meta$X <- NULL
meta$type <-factor(meta$type)
# DESeq2 is looking for only counts, without a first column of gene names, make the gene names row names.
# This is testing differential expression of AMR gene families
#construct DESEQDataSet Object
dds <- DESeqDataSetFromMatrix(countData=mech2,
colData=meta,
design=~type)
#see what the object looks like
dds
#now run DESeq function
dds <- DESeq(dds)
resultsNames(dds) # lists the coefficients
res <- results(dds, name="type_before_vs_after")
summary(res)
sink("DESeq2_results_ResistanceMechanism.txt")
print(res)
sink()
sink("DESeq2_summary_ResistanceMechanism.txt")
print(summary(res))
sink()
library(ggplot2)
library(reshape2)
meta <-read.table("metadata_13.txt",sep="\t",header=TRUE)
meta$X <- NULL
mech <-read.table("Untreated-vs-antibiotic_ResistanceMechanism-counts.txt",sep="\t",header=TRUE)
mech$X <- NULL
#calculate relative abundance from counts
mech_RA <- mech[,-1]/colSums(mech[,-1]) * 100
mech_RA$Resistance.Mechanism <- mech$Resistance.Mechanism
#merge metadata and count dataframes - start by converting mech from wide to long format
mech_long <- melt(mech_RA, id.vars=c("Resistance.Mechanism"))
colnames(mech_long)[colnames(mech_long) == "variable"] <- "sample"
colnames(mech_long)[colnames(mech_long) == "value"] <- "proportion"
resist <-merge(meta, mech_long, "sample")
write.table(resist,"Untreated-vs-antibiotic_ResistanceMechanism-RA_combine_other.txt",sep="\t",col.names=NA)
other <-read.table("Untreated-vs-antibiotic_ResistanceMechanism-RA_combine_other.txt",sep="\t",header=TRUE)
other$type <-factor(other$type, levels=c("before","after"))
other$Resistance.Mechanism <-factor(other$Resistance.Mechanism, levels = c("antibiotic efflux","antibiotic inactivation","antibiotic target alteration","antibiotic target protection","antibiotic target replacement","reduced permeability to antibiotic","other"))
mycolors <-c("antibiotic efflux"="#E69F00","antibiotic inactivation"="#D55E00","antibiotic target alteration"="#56B4E9","antibiotic target protection"="#0072B2","antibiotic target replacement"="#009E73","reduced permeability to antibiotic"="#CC79A7","other"="#999999")
p1<-ggplot(other, aes(fill=Resistance.Mechanism, x=sample, y=proportion))+
geom_bar(position="fill",stat="identity")+
facet_grid(. ~ type, scales="free", space="free")+
theme_bw()+
theme(axis.text.x=element_text(angle=90))+
scale_fill_manual(values=mycolors)
p1
other <-read.table("Untreated-vs-antibiotic_ResistanceMechanism-RA_combine_other.txt",sep="\t",header=TRUE)
other$type <-factor(other$type, levels=c("before","after"))
other$Resistance.Mechanism <-factor(other$Resistance.Mechanism, levels = c("antibiotic efflux","antibiotic inactivation","antibiotic target alteration","antibiotic target protection","antibiotic target replacement","reduced permeability to antibiotic","other"))
mycolors <-c("antibiotic efflux"="#E69F00","antibiotic inactivation"="#D55E00","antibiotic target alteration"="#56B4E9","antibiotic target protection"="#0072B2","antibiotic target replacement"="#009E73","reduced permeability to antibiotic"="#CC79A7","other"="#999999")
View(other)
counts <- read.table("20-samples-Bact-cds-counts.txt",sep="\t",header=TRUE)
# DeSeq is looking for only counts, without a first column of gene names, make the gene names row names.
mat <- counts[,-1]
rownames(mat) <- counts[,1]
# The Salmon counts have decimal places - round them up to prevent issues in deseq
counts2<-round(mat,digits=0)
# remove the disease samples from this analysis
counts2$AMR1D <- NULL
counts2$AMR2D <- NULL
counts2$AMR3D <- NULL
counts2$AMR5D <- NULL
counts2$AMR7D <- NULL
counts2$AMR8D <- NULL
counts2$AMR9D <- NULL
counts3 <-counts2[rowSums(counts2[])>0,] # remove empty rows
# use counts3 as input for DESeq2
counts4 <- counts3
counts4$row_names <- row.names(counts4) # add back transcript.id as a column to merge with metadata
colnames(counts4)[14] <- 'transcript_id'
rgi <- read.table("rgi_out.txt",sep="\t",header=TRUE,quote="")
rgi <- read.table("rgi_out.txt",sep="\t",header=TRUE,quote="")
rgi_counts <-merge(rgi,counts4,by="transcript_id")
write.table(rgi_counts,"Untreated-vs-antibiotic_RGI-counts.txt",sep="\t",col.names=NA)
meta <-read.table("metadata.txt",sep="\t",header=TRUE)
# remove disease samples to compare just before and after antibiotic treatment
meta2 <-meta[meta$type != "disease",]
write.table(meta2,"metadata_13.txt",sep="\t",col.names=NA)
library(dplyr)
rgi_counts <- read.table("Untreated-vs-antibiotic_RGI-counts.txt",sep="\t",header=TRUE)
rgi_counts[1] <- NULL
#combine individual gene counts to get counts by AMR.Gene.Family
amrfam <- rgi_counts %>% group_by(AMR.Gene.Family) %>% summarize_at(vars(AMR1A:AMR10A), sum)
write.table(amrfam,"Untreated-vs-antibiotic_AMRgenefamily-counts.txt",sep="\t",col.names=NA)
#format for DESeq2
amrfam2 <- as.data.frame(amrfam)
rownames(amrfam2) <- amrfam2[,1]
amrfam2$AMR.Gene.Family <- NULL
# use amrfam2 as input for DESeq2
#combine individual gene counts to get counts by Drug.Class
drug <- rgi_counts %>% group_by(Drug.Class) %>% summarize_at(vars(AMR1A:AMR10A), sum)
write.table(drug,"Untreated-vs-antibiotic_DrugClass-counts.txt",sep="\t",col.names=NA)
#format for DESeq2
drug2 <- as.data.frame(drug)
rownames(drug2) <- drug2[,1]
drug2$Drug.Class <- NULL
# use drug2 as input for DESeq2
#combine individual gene counts to get counts by Resistance.Mechanism
mech <- rgi_counts %>% group_by(Resistance.Mechanism) %>% summarize_at(vars(AMR1A:AMR10A), sum)
write.table(mech,"Untreated-vs-antibiotic_ResistanceMechanism-counts.txt",sep="\t",col.names=NA)
#format for DESeq2
mech2 <- as.data.frame(mech)
rownames(mech2) <- mech2[,1]
mech2$Resistance.Mechanism <- NULL
# use mech2 as input for DESeq2
library(DESeq2)
meta <-read.table("metadata_13.txt",sep="\t",header=TRUE)
meta$X <- NULL
meta$type <-factor(meta$type)
# DESeq2 is looking for only counts, without a first column of gene names, make the gene names row names.
# This is testing all individual RGI genes
#construct DESEQDataSet Object
dds <- DESeqDataSetFromMatrix(countData=counts3,
colData=meta,
design=~type)
#see what the object looks like
dds
#now run DESeq function
dds <- DESeq(dds)
resultsNames(dds) # lists the coefficients
res <- results(dds, name="type_before_vs_after")
summary(res)
sink("DESeq2_summary_transcriptid.txt")
print(summary(res))
sink()
sink("DESeq2_results_transcriptid.txt")
print(res)
sink()
library(DESeq2)
meta <-read.table("metadata_13.txt",sep="\t",header=TRUE)
meta$X <- NULL
meta$type <-factor(meta$type)
# DESeq2 is looking for only counts, without a first column of gene names, make the gene names row names.
# This is testing differential expression of AMR gene families
#construct DESEQDataSet Object
dds <- DESeqDataSetFromMatrix(countData=amrfam2,
colData=meta,
design=~type)
#see what the object looks like
dds
#now run DESeq function
dds <- DESeq(dds)
resultsNames(dds) # lists the coefficients
res <- results(dds, name="type_before_vs_after")
summary(res)
sink("DESeq2_results_AMRgenefamily.txt")
print(res)
sink()
sink("DESeq2_summary_AMRgenefamily.txt")
print(summary(res))
sink()
library(DESeq2)
meta <-read.table("metadata_13.txt",sep="\t",header=TRUE)
meta$X <- NULL
meta$type <-factor(meta$type)
# DESeq2 is looking for only counts, without a first column of gene names, make the gene names row names.
# This is testing differential expression of AMR gene families
#construct DESEQDataSet Object
dds <- DESeqDataSetFromMatrix(countData=drug2,
colData=meta,
design=~type)
#see what the object looks like
dds
#now run DESeq function
dds <- DESeq(dds)
resultsNames(dds) # lists the coefficients
res <- results(dds, name="type_before_vs_after")
summary(res)
sink("DESeq2_results_DrugClass.txt")
print(res)
sink()
sink("DESeq2_summary_DrugClass.txt")
print(summary(res))
sink()
library(DESeq2)
meta <-read.table("metadata_13.txt",sep="\t",header=TRUE)
meta$X <- NULL
meta$type <-factor(meta$type)
# DESeq2 is looking for only counts, without a first column of gene names, make the gene names row names.
# This is testing differential expression of AMR gene families
#construct DESEQDataSet Object
dds <- DESeqDataSetFromMatrix(countData=mech2,
colData=meta,
design=~type)
#see what the object looks like
dds
#now run DESeq function
dds <- DESeq(dds)
resultsNames(dds) # lists the coefficients
res <- results(dds, name="type_before_vs_after")
summary(res)
sink("DESeq2_results_ResistanceMechanism.txt")
print(res)
sink()
sink("DESeq2_summary_ResistanceMechanism.txt")
print(summary(res))
sink()
library(ggplot2)
library(reshape2)
meta <-read.table("metadata_13.txt",sep="\t",header=TRUE)
meta$X <- NULL
mech <-read.table("Untreated-vs-antibiotic_ResistanceMechanism-counts.txt",sep="\t",header=TRUE)
mech$X <- NULL
#calculate relative abundance from counts
mech_RA <- mech[,-1]/colSums(mech[,-1]) * 100
mech_RA$Resistance.Mechanism <- mech$Resistance.Mechanism
#merge metadata and count dataframes - start by converting mech from wide to long format
mech_long <- melt(mech_RA, id.vars=c("Resistance.Mechanism"))
colnames(mech_long)[colnames(mech_long) == "variable"] <- "sample"
colnames(mech_long)[colnames(mech_long) == "value"] <- "proportion"
resist <-merge(meta, mech_long, "sample")
write.table(resist,"Untreated-vs-antibiotic_ResistanceMechanism-RA_combine_other.txt",sep="\t",col.names=NA)
#in excel, I changed categories with multiple mechanisms listed into "other" to reduce total number of displayed categories (and get rid of super long names in legend that prevented successful plotting)
other <-read.table("Untreated-vs-antibiotic_ResistanceMechanism-RA_combine_other.txt",sep="\t",header=TRUE)
other$type <-factor(other$type, levels=c("before","after"))
other$Resistance.Mechanism <-factor(other$Resistance.Mechanism, levels = c("antibiotic efflux","antibiotic inactivation","antibiotic target alteration","antibiotic target protection","antibiotic target replacement","reduced permeability to antibiotic","other"))
mycolors <-c("antibiotic efflux"="#E69F00","antibiotic inactivation"="#D55E00","antibiotic target alteration"="#56B4E9","antibiotic target protection"="#0072B2","antibiotic target replacement"="#009E73","reduced permeability to antibiotic"="#CC79A7","other"="#999999")
#plot as stacked bars
pdf("resistance_mechanisms.pdf", height=4)
p1<-ggplot(other, aes(fill=Resistance.Mechanism, x=sample, y=proportion))+
geom_bar(position="fill",stat="identity")+
facet_grid(. ~ type, scales="free", space="free")+
theme_bw()+
theme(axis.text.x=element_text(angle=90))+
scale_fill_manual(values=mycolors)
p1
dev.off()
#group colonies to look at before/after
pdf("resistance_mechanisms_v2.pdf", height=4)
p1<-ggplot(other, aes(fill=Resistance.Mechanism, x=sample, y=proportion))+
geom_bar(position="fill",stat="identity")+
facet_grid(. ~ colony, scales="free", space="free")+
theme_bw()+
theme(axis.text.x=element_text(angle=90))+
scale_fill_manual(values=mycolors)
p1
dev.off()
other <-read.table("Untreated-vs-antibiotic_ResistanceMechanism-RA_combine_other.txt",sep="\t",header=TRUE)
View(other)
other$type <-factor(other$type, levels=c("before","after"))
other$Resistance.Mechanism <-factor(other$Resistance.Mechanism, levels = c("antibiotic efflux","antibiotic inactivation","antibiotic target alteration","antibiotic target protection","antibiotic target replacement","reduced permeability to antibiotic","other"))
mycolors <-c("antibiotic efflux"="#E69F00","antibiotic inactivation"="#D55E00","antibiotic target alteration"="#56B4E9","antibiotic target protection"="#0072B2","antibiotic target replacement"="#009E73","reduced permeability to antibiotic"="#CC79A7","other"="#999999")
p1<-ggplot(other, aes(fill=Resistance.Mechanism, x=sample, y=proportion))+
geom_bar(position="fill",stat="identity")+
facet_grid(. ~ type, scales="free", space="free")+
theme_bw()+
theme(axis.text.x=element_text(angle=90))+
scale_fill_manual(values=mycolors)
p1
p1<-ggplot(other, "colony", aes(fill=Resistance.Mechanism, x=sample, y=proportion))+
geom_bar(position="fill",stat="identity")+
facet_grid(. ~ type, scales="free", space="free")+
theme_bw()+
theme(axis.text.x=element_text(angle=90))+
scale_fill_manual(values=mycolors)
p1<-ggplot(other, aes(fill=Resistance.Mechanism, x=sample, y=proportion))+
geom_bar(position="fill",stat="identity")+
facet_grid(. ~ type, scales="free", space="free")+
theme_bw()+
theme(axis.text.x=element_text(angle=90))+
scale_fill_manual(values=mycolors)
p1
p1<-ggplot(other, aes(fill=Resistance.Mechanism, x=sample, y=proportion))+
geom_bar(position="fill",stat="identity")+
facet_grid(colony ~ type, scales="free", space="free")+
theme_bw()+
theme(axis.text.x=element_text(angle=90))+
scale_fill_manual(values=mycolors)
p1
p1<-ggplot(other, aes(fill=Resistance.Mechanism, x=sample, y=proportion))+
geom_bar(position="fill",stat="identity")+
facet_grid(. ~ type, scales="free", space="free")+
theme_bw()+
theme(axis.text.x=element_text(angle=90))+
scale_fill_manual(values=mycolors)
p1
p1<-ggplot(other, aes(fill=Resistance.Mechanism, x=colony, y=proportion))+
geom_bar(position="fill",stat="identity")+
facet_grid(. ~ type, scales="free", space="free")+
theme_bw()+
theme(axis.text.x=element_text(angle=90))+
scale_fill_manual(values=mycolors)
p1
p1<-ggplot(other, aes(fill=Resistance.Mechanism, x=colony, y=proportion))+
geom_bar(position="fill",stat="identity")+
facet_grid(. ~ type, scales="free", space="free")+
theme_bw()+
scale_fill_manual(values=mycolors)
p1
p1<-ggplot(other, aes(fill=Resistance.Mechanism, x=colony, y=proportion))+
geom_bar(position="fill",stat="identity")+
facet_grid(. ~ colony, scales="free", space="free")+
theme_bw()+
scale_fill_manual(values=mycolors)
p1
p1<-ggplot(other, aes(fill=Resistance.Mechanism, x=sample, y=proportion))+
geom_bar(position="fill",stat="identity")+
facet_grid(. ~ colony, scales="free", space="free")+
theme_bw()+
scale_fill_manual(values=mycolors)
p1
p1<-ggplot(other, aes(fill=Resistance.Mechanism, x=sample, y=proportion))+
geom_bar(position="fill",stat="identity")+
facet_grid(. ~ colony, scales="free", space="free")+
theme_bw()+
theme(axis.text.x=element_text(angle=90))+
scale_fill_manual(values=mycolors)
p1
pdf("resistance_mechanisms.pdf", height=4)
p1<-ggplot(other, aes(fill=Resistance.Mechanism, x=colony, y=proportion))+
geom_bar(position="fill",stat="identity")+
facet_grid(. ~ type, scales="free", space="free")+
theme_bw()+
scale_fill_manual(values=mycolors)
p1
dev.off()
p1<-ggplot(other, aes(fill=Resistance.Mechanism, x=colony, y=proportion))+
geom_bar(position="fill",stat="identity")+
facet_grid(. ~ type, scales="free", space="free")+
theme_bw()+
theme(strip.text.x=element_text(face="bold"))+
scale_fill_manual(values=mycolors)
p1
pdf("resistance_mechanisms.pdf", height=4)
p1<-ggplot(other, aes(fill=Resistance.Mechanism, x=colony, y=proportion))+
geom_bar(position="fill",stat="identity")+
facet_grid(. ~ type, scales="free", space="free")+
theme_bw()+
theme(strip.text.x=element_text(face="bold"))+
scale_fill_manual(values=mycolors)
p1
dev.off()
rgi_counts <- read.table("Untreated-vs-antibiotic_RGI-counts.txt",sep="\t",header=TRUE)
rgi_counts[1] <- NULL
#subset = just "antibiotic inactivation" which includes beta-lactamases
inact <- rgi_counts[which(rgi_counts$Resistance.Mechanism=='antibiotic inactivation'),]
inact2 <- inact %>% group_by(AMR.Gene.Family) %>% summarize_at(vars(AMR1A:AMR10A), sum)
write.table(inact2,"Untreated-vs-antibiotic_AntibioticInactivation-counts.txt",sep="\t",col.names=NA)
#calculate relative abundance from counts
inact2_RA <- inact2[,-1]/colSums(inact2[,-1]) * 100
inact2_RA$AMR.Gene.Family <- inact2$AMR.Gene.Family
inact3 = inact2_RA[, c("AMR.Gene.Family", names(inact2_RA)[names(inact2_RA) != "AMR.Gene.Family"])]
write.table(inact3,"Untreated-vs-antibiotic_AntibioticInactivation-RA.txt",sep="\t",col.names=NA)
View(inact3)
#in excel remove all rows that are not beta-lactamases 215 out of 260 inactivation gene families are beta-lactamases
beta <- read.table("Untreated-vs-antibiotic_AntibioticInactivation-RA_v2.txt",sep="\t",header=TRUE)
#in excel remove all rows that are not beta-lactamases 215 out of 260 inactivation gene families are beta-lactamases
beta <- read.table("Untreated-vs-antibiotic_AntibioticInactivation-RA.txt",sep="\t",header=TRUE)
View(beta)
beta$total <- rowSums(beta[,2:14])
beta <- beta[order(beta$total, decreasing = TRUE),]
top10 <-head(beta, 10)
write.table(top10,"Untreated-vs-antibiotic_AntibioticInactivation-RA_top10beta.txt",sep="\t",col.names=NA)
top10_long <- melt(top10, id.vars=c("AMR.Gene.Family"))
colnames(top10_long)[colnames(top10_long) == "variable"] <- "sample"
colnames(top10_long)[colnames(top10_long) == "value"] <- "proportion"
meta <-read.table("metadata_13.txt",sep="\t",header=TRUE)
meta$X <- NULL
beta10_meta <-merge(meta, top10_long, "sample")
View(beta10_meta)
beta10_meta$type <-factor(beta10_meta$type, levels=c("before","after"))
beta10_meta$AMR.Gene.Family <-factor(beta10_meta$AMR.Gene.Family, levels = c("OXA beta-lactamase","ADC beta-lactamases pending classification for carbapenemase activity","CfiA beta-lactamase","MOX beta-lactamase","SHV beta-lactamase","PER beta-lactamase","SPR beta-lactamase","subclass B3 PEDO beta-lactamase","GOB beta-lactamase","YRC Beta-lactamase"))
ggplot(beta10_meta, aes(fill=AMR.Gene.Family, x=sample, y=proportion)) +geom_bar(position="fill",stat="identity")+facet_grid(. ~ type, scales="free", space="free")+
theme_bw()+
theme(axis.text.x=element_text(angle=90))
devtools::install_github("JLSteenwyk/ggpubfigs")
install.packages("devtools")
devtools::install_github("JLSteenwyk/ggpubfigs")
library(ggpubfigs)
beta <- read.table("Untreated-vs-antibiotic_AntibioticInactivation-RA.txt",sep="\t",header=TRUE)
#create a sum column to find most abundant beta-lactamase gene families then sort by abundance before plotting
beta$total <- rowSums(beta[,2:14])
beta <- beta[order(beta$total, decreasing = TRUE),]
top10 <-head(beta, 10)
write.table(top10,"Untreated-vs-antibiotic_AntibioticInactivation-RA_top10beta.txt",sep="\t",col.names=NA)
#merge metadata and count dataframes - start by converting mech from wide to long format
top10_long <- melt(top10, id.vars=c("AMR.Gene.Family"))
colnames(top10_long)[colnames(top10_long) == "variable"] <- "sample"
colnames(top10_long)[colnames(top10_long) == "value"] <- "proportion"
meta <-read.table("metadata_13.txt",sep="\t",header=TRUE)
meta$X <- NULL
beta10_meta <-merge(meta, top10_long, "sample")
View(beta10_meta)
knitr::opts_chunk$set(echo = TRUE)
library(dada2)
library(ggplot2)
library(phyloseq)
library(vegan)
library(knitr)
library(ALDEx2)
library(CoDaSeq)
#library(ANCOMBC)
library(dplyr)
library(nloptr)
library(tibble)
library(randomcoloR)
writeLines(capture.output(sessionInfo()), "sessionInfo.txt")
setwd("/Users/juliemeyer/Documents/AMR-16S-rRNA")
otu <- read.table("silva_nochloronomito_otu_table_ps5.txt",sep="\t",header=TRUE, row.names=1)
taxon <- read.table("silva_nochloronomito_taxa_table_ps5.txt",sep="\t",header=TRUE,row.names=1)
samples<-read.table("metadata_ps5.txt",sep="\t",header=T,row.names=1)
OTU = otu_table(otu, taxa_are_rows=FALSE)
taxon<-as.matrix(taxon)
TAX = tax_table(taxon)
sampledata = sample_data(samples)
ps <- phyloseq(otu_table(otu, taxa_are_rows=FALSE),
sample_data(samples),
tax_table(taxon))
ps
d.czm <- cmultRepl(t(otu), method="CZM", label=0, z.warning=1)
# Perform the center-log-ratio (CLR) transformation
d.clr <- codaSeq.clr(d.czm)
# transpose matrix of CLR transformed data for ordination and dendrogram
E.clr <- t(d.clr)
# plot compositional PCA biplot (perform a singular value decomposition)
d.pcx <- prcomp(E.clr)
# calculate percent variance explained for the axis labels
pc1 <- round(d.pcx$sdev[1]^2/sum(d.pcx$sdev^2),2)
pc2 <- round(d.pcx$sdev[2]^2/sum(d.pcx$sdev^2),2)
xlab <- paste("PC1: ", pc1, sep="")
ylab <- paste("PC2: ", pc2, sep="")
#biplot(d.pcx, cex=c(0.6,0.4), var.axes=F,scale=1, xlab=xlab, ylab=ylab)
summary(d.pcx)
str(d.pcx)
screeplot(d.pcx)
df_out <- as.data.frame(d.pcx$x)
theme_set(theme_bw()+theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank()))
cols<-c("before"="#6CD5D9","after"="#107A86")
samples$type<-factor(samples$type, levels=c("before","after"))
p<-ggplot(df_out,aes(x=PC1,y=PC2,fill=samples$type,shape=samples$fraction))
p<-p+geom_point(size=3)+
theme(axis.title = element_text(size=14))+
theme(axis.text=element_text(size=12))+
theme(legend.title = element_text(size=14))+
theme(legend.text = element_text(size=12))+
scale_shape_manual(values=c(21,22))+
scale_fill_manual(values=cols)+
guides(fill = guide_legend(override.aes=list(shape=21)))+
facet_grid(~samples$fraction)
p + labs(x=xlab, y=ylab, fill="Type",shape="Fraction") +coord_fixed()
type<-as.character(samples$type)
frac<-as.character(samples$fraction)
# permanova between groups using Aitchison distance
dist.clr <- dist(E.clr)
perm<-adonis2(dist.clr~type*frac,as(sample_data(ps),"data.frame"))
print(perm)
View(samples)
otu <- read.table("silva_nochloronomito_otu_table.txt",sep="\t",header=TRUE, row.names=1)
taxon <- read.table("silva_nochloronomito_taxa_table.txt",sep="\t",header=TRUE,row.names=1)
samples<-read.table("metadata.txt",sep="\t",header=T,row.names=1)
OTU = otu_table(otu, taxa_are_rows=FALSE)
taxon<-as.matrix(taxon)
TAX = tax_table(taxon)
sampledata = sample_data(samples)
ps <- phyloseq(otu_table(otu, taxa_are_rows=FALSE),
sample_data(samples),
tax_table(taxon))
ps
psnb = subset_samples(ps, colony != "blank") #remove sample blanks
psnb # 6138 taxa and 50 samples
# remove disease samples to compare before and after amox treatment
ps1 = subset_samples(psnb, type != "disease")
ps1 # 6138 taxa and 35 samples
otu = as(otu_table(ps1), "matrix")
taxon = as(tax_table(ps1), "matrix")
metadata = as(sample_data(ps1), "matrix")
write.table(metadata,"metadata_ps1.txt",sep="\t",col.names=NA)
writeLines(capture.output(sessionInfo()), "sessionInfo_16S.txt")
library(dada2)
library(ggplot2)
library(phyloseq)
library(vegan)
library(knitr)
library(ALDEx2)
library(CoDaSeq)
library(dplyr)
library(nloptr)
library(tibble)
library(randomcoloR)
writeLines(capture.output(sessionInfo()), "sessionInfo.txt")
library(dada2)
library(ggplot2)
library(phyloseq)
library(vegan)
library(knitr)
library(ALDEx2)
library(CoDaSeq)
library(ANCOMBC)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ANCOMBC")
library(dada2)
library(ggplot2)
library(phyloseq)
library(vegan)
library(knitr)
library(ALDEx2)
library(CoDaSeq)
library(ANCOMBC)
library(dplyr)
library(nloptr)
library(tibble)
library(randomcoloR)
writeLines(capture.output(sessionInfo()), "sessionInfo.txt")
library(dplyr)
version(dplyr)
sessioninfo(dplyr)
sessionInfo()
library(DESeq2)
